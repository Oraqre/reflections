How is the staging area different from the working directory and the
repository? What value do you think it offers?

    Staging area includes things ready or can be commited, while working
    area contains all the files in the directory that a repo is associated
    with.

How can you use the staging area to make sure you have one commit per 
logical change?
    
    Run git diff --staged to compare the staging area with the latest
    commit to find the difference.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

    When you want add some experimental features to your project, or want
    to create a version of different languages.
    With branches, you can focus on adding new features without worrying
    these new feature would break your project.

How do the diagrams help you visulaize the branch structure?

    Use "git log --graph --oneline branch_1 branch_2 ..."?
    Through the diagrams, you can easily figure out the commons and diffs
    between diffrent branches.

What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

    The features added in other branch are available in the branch you merge
    into.
    After a merge, all commits are shown based on the timestamp in git log,
    the diagram can show the commits from the two different branches.

What are the pros and cons of Git's automatic merging vs. always doing
merges manually?

    With automatic merging, you can save time and improve effeciency. Doing
    merges manully can avoid breaking something. As long as version control
    systems do not act 'smartly' on their own, automatic merging is good.
    
